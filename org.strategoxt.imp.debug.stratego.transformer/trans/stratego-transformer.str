module stratego-transformer

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  editor-common.generated
  trans-str

  traverse-imports
  	
  charoffset-converter // convert line-based offsets to file-based offsets
  	
rules // Main editor interface (defined by editor/Test-Builders and -References.esv)
 

  
  // Prints the abstract syntax ATerm of a selection.
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected // we just return the input term
  

      
strategies
	//main = io-wrap(create-options, create-usage, default-system-about, execute) // read from stdin when -i is missing and outputs to stdout when -o is missing
	main = java-monitor-start(|"main");option-wrap(create-options, create-usage, default-system-about, execute-wrap)
	
	execute-wrap = java-monitor-start(|"execute"); execute ; java-monitor-end(|"execute"); java-monitor-end(|"main"); java-timer-print
	
	// let user specify its own base-dir, base-dir is the toplevel directory containing the stratego files (in eclipse it would be the project dir)
	// if not specified use the directory of stratego-input-path
	get-base-path =  
	(<get-config> "--base-dir") 
		< (<get-config> "--base-dir")
		+ (stratego-input-path := <get-config> "-i";<dirname> stratego-input-path)
	
	execute =
		//check-options ; 
		library-paths* := <get-config-I> // ; debug(!"-I: ")
		; stratego-input-path := <get-config> "-i" // ; debug(!"-i: ")
		; output-base-path := <get-config> "--gen-dir" // ; debug(!"--gen-dir: ")
		//; base-path := <dirname> stratego-input-path 
		// let user specify its own base-dir, base-dir is the toplevel directory containing the stratego files (in eclipse it would be the project dir)
		// if not specified use the directory of stratego-input-path
		; get-base-path ; ?base-path
		; debug(!"base-path:")
		; <debug(!"stratego-input-path:")> stratego-input-path
		//; stratego-file := <base-filename> stratego-input-path
		// make stratego-input-path absolute, and strip the basepath
		; (parent, stratego-file) := <split-path(|base-path)> stratego-input-path
		; 
		  <check-input-file> stratego-input-path // check if the input file exists
		  <
		  	 !(base-path, output-base-path, stratego-file) ; apply-debug-project(|library-paths*); java-store-term; file-line-length-table-helper
		  + 
		  	debug(!"Failure: Cannot add debug information! ")
		  	

	// should save the current term so that it can be accessed from java
	external java-store-term(|)
	
	external java-store-term(|name)
	
	external java-monitor-start(|name)
	external java-monitor-end(|name)	  

	external java-timer-print(|)

	create-options =
 		ArgOption("--base-dir"
 			, <set-config> ("--base-dir", <id>)
 			, !"--base-dir      Base directory, all paths will be relative to this directory (optional)"
		)
		+ Option("--output-rtree"
			, <set-config> ("--output-rtree", ())
			, !"--output-rtree	Output rtree-files instead of str-files"
		)
		+ ArgOption("-i"
			, <set-config> ("-i", <id>)
 			, !"-i file          Main stratego program"
		)
     	+ OptionCheck(
              <set-config> ("--help", ())
            , OptionOneCheck("-i")
            | "error: option -i is required"
            )
		+ ArgOption("--gen-dir"
			, <set-config> ("--gen-dir", <id>)
 			, !"--gen-dir        Output base directory"
		)
     	+ OptionCheck(
              <set-config> ("--help", ())
            , OptionOneCheck("--gen-dir")
            | "error: option --gen-dir is required"
            )
		+ ArgOption("-I"
			, where(<extend-config> ("-I", [<id>]))
 			, !"-I directory     Stratego files in this external directory will also be debug-transformed when they are used as imports by the main stratego program."
		)
		+ Option("--charoffset-converter"
			, <set-config> ("--charoffset-converter", ())
			, !"--charoffset-converter     Create line offset table."
		) + Option("--fail-catch"
			, <set-config> ("--fail-catch", ())
			, !"--fail-catch     try to catch fails in where clauses."
		) + Option("--no-step"
			, <set-config> ("--no-step", ())
			, !"--no-step        do not generate s-step events."
		) + Option("--no-var"
			, <set-config> ("--no-var", ())
			, !"--no-var         do not generate s-var events."
		) + Option("--no-entry-exit"
			, <set-config> ("--no-entry-exit", ())
			, !"--no-entry-exit  do not generate s/r-entry/exit events."
		)
		
  get-config-I =
    <get-config> "-I" <+ ![]

	check-input-file = ?stratego-input-path; (file-exists <+ (!stratego-input-path ; debug(!"File does not exist: ") ; fail))
      
 create-usage =
 default-system-usage(
 	!"Usage: stratego-transformer [options]"
  , !
"   Adds debug information to a stratego program.
    The program outputs a stratego program that 
    depends on stratego-debug-runtime.jar and
    stratego-debug-runtime-java.jar."
     )

	
