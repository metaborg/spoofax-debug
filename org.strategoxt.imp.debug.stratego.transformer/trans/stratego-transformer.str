module stratego-transformer

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  lib/editor-common.generated
  trans-str

rules // Main editor interface (defined by editor/Test-Builders and -References.esv)
 

  
  // Prints the abstract syntax ATerm of a selection.
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected // we just return the input term
  

      
strategies
	//main = io-wrap(create-options, create-usage, default-system-about, execute) // read from stdin when -i is missing and outputs to stdout when -o is missing
	main = option-wrap(create-options, create-usage, default-system-about, execute)
	
	execute =
		//check-options ; 
		library-paths* := <get-config-I> // ; debug(!"-I: ")
		; stratego-input-path := <get-config> "-i" // ; debug(!"-i: ")
		; output-base-path := <get-config> "--gen-dir" // ; debug(!"--gen-dir: ")
		; base-path := <dirname> stratego-input-path
		; stratego-file := <base-filename> stratego-input-path
		; <check-input-file> stratego-input-path // check if the input file exists
		  <
		  	 !(base-path, output-base-path, stratego-file) ; apply-debug-project(|library-paths*); java-store-term
		  + 
		  	debug(!"Failure: Cannot add debug information! ")

	// should save the current term so that it can be accessed from java
	external java-store-term(|)
		  

	create-options =
 		Option("--option1"
 			, <set-config> ("--option1", ())
 			, !"--option1        This is a an example option"
		)
		+ Option("--output-rtree"
			, <set-config> ("--output-rtree", ())
			, !"--output-rtree	Output rtree-files instead of str-files"
		)
		+ ArgOption("-i"
			, <set-config> ("-i", <id>)
 			, !"-i file          Main stratego program"
		)
     	+ OptionCheck(
              <set-config> ("--help", ())
            , OptionOneCheck("-i")
            | "error: option -i is required"
            )
		+ ArgOption("--gen-dir"
			, <set-config> ("--gen-dir", <id>)
 			, !"--gen-dir        Output base directory"
		)
     	+ OptionCheck(
              <set-config> ("--help", ())
            , OptionOneCheck("--gen-dir")
            | "error: option --gen-dir is required"
            )
		+ ArgOption("-I"
			, where(<extend-config> ("-I", [<id>]))
 			, !"-I directory     Stratego files in this external directory will also be debug-transformed when they are used as imports by the main stratego program."
		)
  get-config-I =
    <get-config> "-I" <+ ![]

	check-input-file = ?stratego-input-path; (file-exists <+ (!stratego-input-path ; debug(!"File does not exist: ") ; fail))
      
 create-usage =
 default-system-usage(
 	!"Usage: option-demo [options]"
  , !
"   This is a test program to demonstrate use of
    parse-options and  generation of usage info
    from option and switch specificatios. These
    now contain usage info as additional third 
    argument."
     )

	
