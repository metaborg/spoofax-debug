module stratego-transformer

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  lib/editor-common.generated
  trans-str

rules // Main editor interface (defined by editor/Test-Builders and -References.esv)
 

  
  // Prints the abstract syntax ATerm of a selection.
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected // we just return the input term
  

      
strategies
	main = io-wrap(create-options, create-usage, default-system-about, execute)
	
	execute = id
	
	create-options =
 		Option("--option1"
 			, <set-config> ("--option1", ())
 			, !"--option1        This is a an example option"
		)
		+ ArgOption("--arg1"
			, <set-config> ("--arg1", <id>)
 			, !"--arg1           This is an example arg option"
		)
  
 create-usage =
 default-system-usage(
 	!"Usage: option-demo [options]"
  , !
"   This is a test program to demonstrate use of
    parse-options and  generation of usage info
    from option and switch specificatios. These
    now contain usage info as additional third 
    argument."
     )