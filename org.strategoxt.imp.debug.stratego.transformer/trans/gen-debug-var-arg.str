module gen-debug-var-arg

// creates a where clause containing s-var-calls for variables that are rule/strategy term-parameters
// and for variables used in the match-term of a Rule

imports
  libstratego-lib
  include/Test
  assert
  location-util
  gen-debug-var
  
signature
  sorts
    BA
  constructors

	// Line is needed or eclipse editor will generate an error. But building the project will not throw an error if this line is missing..
  	BA		: Strategy * Term -> BA 
  	
rules
	
	// current term is a Term
	// create a WhereClause containing all s-var call for each variable in the match term
	match-term-to-s-var-clause(|filename, name) :
		match-term -> clause
		//where <debug(!"match-term ")> match-term
		where
			// collect all Var in this term and create a Seq containing a s-var calls for each variable
			seq := <create-s-var-calls-for-Term(|filename, name)> match-term
			; clause := WhereClause(seq)
	
	
	// current term should be a stratego Term.
	// for each variable create a s-var call and join them using Seq()
	create-s-var-calls-for-Term(|filename, name):
		term -> seq
		where
			// collect all Var in this term
			vars* := <collect(?Var(_))> term
			; s-vars* := <map(create-s-var-call-with-term(|filename, name))> vars*
			; seq := <create-seqs> s-vars*

			
	
	// create a where clause containing s-var calls for each term that is used as argument
	t-args-to-s-var-where-clause(|filename, name) :
	t-args* -> clause
	where
		s-vars* := <map(t-arg-to-s-var(|filename, name))> t-args*
		// convert list to recursive Seq
		; seq := <create-seqs> s-vars*
		// create WhereClause
		; clause := WhereClause(seq)
		
	// create a Where() strategy containing all s-var calls for each strategy term argument
	t-args-to-s-var-where-strategy(|filename, name) :
		t-args* -> where-s
	where
		s-vars* := <map(t-arg-to-s-var(|filename, name))> t-args*
		// convert list to recursive Seq
		; seq := <create-seqs> s-vars*
		// create WhereClause		
		; where-s := Where(seq)
			
	// v can be a "var-name"
	// v can be a ListVar("term2*")
	t-arg-to-s-var(|filename, name):
		DefaultVarDec(v){a} -> s-var-call
		with 
		  var := <create-var> v // create a Var(_)
		  ; s-var-call := <create-s-var-call-with-term(|filename, name)> var
		    	
	// var should be a Var(_)
	create-s-var-call-with-term(|filename, name) :
		var{a} -> s-var
		where
			var-name := <get-var-name> var
			; s-var-call := <create-s-var-call(|filename, name, var-name, a)>
			; s-var := BA(s-var-call, var)
			  
	// creates a Var(term) from the current term
	// current term should be a string or a ListVar(var-name)
	create-var:
		v{a} -> Var(v){a}
		
	// transform a list of strategies to a Seq
	create-seqs :
		s* -> seq
		where <geq> (<length> s*, 2) // length should be greater than or equal to 2  
		where
			l-length := <length> s*
			; take-length := <subt>(l-length, 1)
			; sub-list := <take(|<subt>(l-length, 1))> s*
			; s-last := <last> s*
			; seq := <foldr(!s-last, create-seq)> sub-list

	// list is size 1, just return the element
	create-seqs:
		s* -> s
		where <eq> (<length> s*, 1)
		where s := <last> s*
		
	// list is size 0, just return the empty list
	create-seqs:
		s* -> s*
		where <eq> (<length> s*, 0)
	
	
strategies
	// current term should be a tuple containing two strategies (s1, s2)
	// output is a Seq(s1, s2) term
	create-seq = ?(s1, s2); !Seq(s1, s2)
