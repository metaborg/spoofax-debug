module traverse-imports
	
// traverse all imports used in the stratego program
imports
	libstrc
//	pack-stratego
  libstratego-xtc 
  libstratego-rtg
  
  trans-str
  
strategies
	// Calls pack-stratego to determine which files are imported by the given stratego file.
	// pack-stratego is recursive as it also finds the files the imported files import.
	// current term should be a string pointing to a stratego file
	list-imports(|args) =
		?ffile
		; !FILE(ffile)
		//; pack-stratego-trm(|args)
	; where(id
      ; incl := <get-config <+ ![]> "-I"
      //; debug(!"incl: ")
      //; <set-config> ("-I", [])
      //; debug(!"set: ")
      //; incl2 := <get-config <+ ![]> "-I"
      //; debug(!"incl2: ")
      ; <parse-options(pack-stratego-options <+ input-options, system-usage, id)> [<whoami <+ !"strc"> | args]
    )
    //; debug(!"where: ")
    ; pack-process-options
    ; pack-report-options
    ; where(pack-include-path /*; debug(!"pack-include-path: ")*/ )
    //; debug(!"config:")
    //; where(!"-I"; get-config; debug(!"IIII: "))
      // current is FILE
    ; pack-stratego(|<pack-include-path>) => (files, spec)

  // Returns a list of all files that are used as imports (or used by other imports) for the given stratego-file.
  // 
  //
  // directories is a list of strings, each element is a directory used by "-I"
  // current term should a tuple with the basepath and the stratego-file which is relative to the basepath.
  get-internal-files(|directories) :
  	(basepath, stratego-file) -> real-files
  	where
  		absolute-location := 	<concat-strings> [basepath, "/", stratego-file]
  		; basic-args := [ "--slack" // skip errors
  			, "-i", absolute-location]
  		//; basic-ext-args := ["-I", "."]  // "." = basepath. Look for imports only in the current dir
  		; ext-args := <map(create-I); concat> directories
  		//	, "-I", "."
  		; <set-config> ("-I", directories)
  		; args := <concat> [basic-args, ext-args]
  		//; debug(!"ARGS: ")
  	  	; <list-imports(|args)> absolute-location
  		; ?(files, _)
  		; real-files := <filter(not(?""))> files
  		  
  create-I:
  	directory -> ["-I", directory]
  	
  	// current term should be an absolute path to a stratego file
  	// and it should start with base-path
  	// strip the basepath from real-file => inputfilePath
  	// call apply-debug-trans
  	// sourceBasedir = base-path
  	// outputfilename = output-base-path + inputfilePath
  	// (sourceBasedir, inputfilePath, outputfilename)
  handle-file(|base-path, output-base-path) = 
  	?absolute-stratego-file
  	; where(<debug(!"file: ")> absolute-stratego-file)
  	; split-path(|base-path) => (parent, rel-path)
  	; sourceBasedir := base-path
  	; inputfilePath := rel-path
  	; outputfilename := <concat-strings> [output-base-path, "/", rel-path]
  	; args := (sourceBasedir, inputfilePath, outputfilename)
  	//; debug(!"apply-debug-trans: ")
  	; <apply-debug-trans> args
  	//; debug(!"DONE apply: ")  	
  	
  // splits the path in two paths, first is base-path, second is the path-part after the base-path (trim leading "/")
  split-path(|base-path) :
  	path -> (parent-path, child-path)
  	where <string-starts-with(|base-path)> path // path should start with the base-path
  	where
  		sub-string-length := <string-length> base-path
  		; full-string-length := <string-length> path
  		; string-list := <explode-string> path
  		; <split-at(|sub-string-length)> string-list => (p0, p1)
  		; parent-path := <implode-string> p0
  		; child-path := <implode-string; ltrim-chars(?'/')> p1