module traverse-imports
	
// traverse all imports used in the stratego program
imports
	libstrc
//	pack-stratego
  libstratego-xtc 
  libstratego-rtg
  
strategies
	// current term should be a string pointing to a stratego file
	list-imports(|args) =
		?ffile
		; !FILE(ffile)
		//; pack-stratego-trm(|args)
	; where(id
      ; incl := <get-config <+ ![]> "-I"
      ; debug(!"incl: ")
      //; <set-config> ("-I", [])
      //; debug(!"set: ")
      //; incl2 := <get-config <+ ![]> "-I"
      //; debug(!"incl2: ")
      ; <parse-options(pack-stratego-options <+ input-options, system-usage, id)> 
          [<whoami <+ !"strc"> | args]
    )
    ; debug(!"where: ")
    ; pack-process-options
    ; pack-report-options
    ; debug(!"config:")
    ; where(!"-I"; get-config; debug(!"IIII: "))
      // current is FILE
    ; pack-stratego(|<pack-include-path>) => (files, spec)
    /*
    ; <pack-maybe-create-depfile> files
    ; !spec
    ; where(<set-config>("-I", incl))
	*/
	
	/*
	  pack-strategoXX(|mkpt) =
	  	?g; debug(!"g"); 
      \ FILE(s) -> IncludePathName(s) \
      ;debug(!"File: ")
    ; !(<id>, mkpt, [])
    ; graph-nodes-undef(
        { file:
          pack-stratego-parse-stratego => (file,_)
        ; rules( FileDependencies :+= file )
        ; if <get-config> "--dump-aterms" then
            where({fn, trm: 
                ?(fn, trm)
                ; if <string-ends-with(|".str")> fn then
                    rules ( StrAsts :+= (fn, trm) )
                  end
                })
          end
        }
      , pack-get-stratego-imports 
        ; map(IncludePathName(id) <+ !IncludeFromPath(<id>))
      , \ (n,x,xs) -> [x|xs] \
      )
    ; (uniq,id)
    ; debug(!"uniq: ")
    ; if ?(_, []) then
       Fst
       ; unzip
       ; (id, pack-flatten-stratego)
      else
        if not(<get-config>"--slack") then
          Snd 
          ; map(pack-report-module-not-found)
          ; <xtc-exit> 1
        else 
          Fst
        ; unzip
        ; (id, pack-flatten-stratego)
        end
      end
*/