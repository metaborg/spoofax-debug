module gen-lookup

imports
	include/Test
	str-reader
	assert
	trans-str
	  
// parse the given stratego file and create a lookup file containing all debug-calls and their linenumbers
rules
	// table-filename is the location of the output table
	// current term should be a list of inputfilenames each pointing to a stratego file
	// output is the location of the table
	create-table(|table-filename): inputfilenames* -> table-filename
	where(debug(!"create-table"))
	where(
		table-file-handle := <get-file-handle(|table-filename)>
		; <map(create-table-for-input(|table-file-handle))> inputfilenames* // writes the table contents of each inputfilename to table-file-handle
		; close-file-handle(|table-file-handle)
	)
	/*
	get-anno-ast(|inputfilename)
  	; assert-module
  	; collect-debug-calls
  	; lines* :=  <create-table-entries>
  	; contents := $[[lines*]]
  	; filename := <guarantee-extension(|"table")> inputfilename
  	; write-to-file(|filename, contents)
  	  )*/
  	  
  	// parse the inputfile, create table entries and add them to the table-file-handle
  	create-table-for-input(|table-file-handle) :
  		inputfilename -> contents
  		where
			get-anno-ast(|inputfilename)
		  	; assert-module // check if it properly parsed!
		  	; collect-debug-calls
		  	; lines* :=  <create-table-entries>
		  	; contents := $[[lines*]]
		  	; write-contents-to-handle(|table-file-handle, contents)
  	    			
// strategy to collect all strago debug calls
	collect-debug-calls =
    	collect-all(is-debug-call)
    
    // matches: s-enter
    is-debug-call = 
    	?CallT(SVar("s-enter"), [], [NoAnnoList(Str(_)), NoAnnoList(Str(_)), _]){anno*}
    	// filename, name, location-info
     // matches: s-exit
    is-debug-call = 
    	?CallT(SVar("s-exit"), [], [NoAnnoList(Str(_)), NoAnnoList(Str(_)), _]){anno*}
    	// filename, name, location-info
    // matches: r-enter
    is-debug-call = 
    	?CallT(SVar("r-enter"), [], [NoAnnoList(Str(_)), NoAnnoList(Str(_)), _]){anno*}
    	// filename, name, location-info
    // matches: r-exit
    is-debug-call = 
    	?CallT(SVar("r-exit"), [], [NoAnnoList(Str(_)), NoAnnoList(Str(_)), _]){anno*}
    	// filename, name, location-info
    // matches: s-step
    is-debug-call = 
    	?CallT(SVar("s-step"), [], [NoAnnoList(Str(_)), NoAnnoList(Str(_)), _]){anno*}
    	// filename, name, location-info
    	
    create-table-entries = map(convert-to-tuple; convert-to-line)
    
    convert-to-tuple :
    	CallT(SVar(debug-event), [], [NoAnnoList(Str(filename)), NoAnnoList(Str(name)), NoAnnoList(Op(_, [NoAnnoList(Str(a)), NoAnnoList(Str(b)), NoAnnoList(Str(c)), NoAnnoList(Str(d))] ))]){anno*}
    	-> (debug-event{}, filename{}, name{}, a{}, b{}, c{}, d{})
    	
    convert-to-line :
  (debug-event, filename, name, a, b, c, d) -> 
    $[[debug-event]	[filename]	[name]	[a]	[b]	[c]	[d]
     ]// should be real tabs between the variables

strategies
	
	test-create-table-1 =
		echo(|"test-create-table-1")
  		; get-project-dir => project-dir
  		; !"test/generated/localvar/stratego" => stratego-files-base-dir
  		; !"localvar.str" => main-stratego-file
  		; <concat-strings> [project-dir, "/", stratego-files-base-dir, "/", main-stratego-file]	=> file1
  		; stratego-files := [file1] // all files should be stratego files with debug information
  		; table-filename := <concat-strings> [project-dir, "/", stratego-files-base-dir, "/", main-stratego-file, ".table"]
  		; <create-table(|table-filename)> stratego-files
  		       
	test-create-table-2 = 
		echo(|"test-create-table-2")
  		; get-project-dir => project-dir
  		; !"test/generated/testimports" => stratego-files-base-dir
  		; !"localvar.str" => rel-f1
  		; !"localmod/syntax/varsyntax.str" => rel-f2
  		; !"localmod/util/utils.str" => rel-f3
		; <concat-strings> [project-dir, "/", stratego-files-base-dir, "/", rel-f1]	=> file1
		; <concat-strings> [project-dir, "/", stratego-files-base-dir, "/", rel-f2]	=> file2
		; <concat-strings> [project-dir, "/", stratego-files-base-dir, "/", rel-f3]	=> file3
		; stratego-files := [file1, file2, file3] // all files should be stratego files with debug information
		; table-filename := <concat-strings> [project-dir, "/", stratego-files-base-dir, "/", rel-f1, ".table"]
		; <create-table(|table-filename)> stratego-files