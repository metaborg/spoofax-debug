module trans-str

imports 
  str-reader
  libstratego-lib
  gen-debug-info
  assert
  gen-lookup
  traverse-imports // show all files used as import
  transformer-test-suite // test-suite
  	
rules
// transform stratego to stratego but add debug statements
	generate-str:
	    (selected, position, ast, path, project-path) -> (show-output-filename, result)
	    where(
	    	complete-path := <concat-strings> [project-path, "/", path]
	    	//; <debug(!" complete-path: ")> complete-path
	      	; show-output-filename := <guarantee-extension(|"show")> path
	      	; output-filename := <guarantee-extension(|"out")> path
	        ; r := <apply-debug-trans> (project-path, path, output-filename)
	        //; <debug(!"apply-debug-trans result")> r
	        ; result := ("see", output-filename) // or None()
	        //; str-ast := <get-anno-ast(|complete-path)> // get the stratego AST
	        //; result := <pp-stratego-ast> str-ast // pretty print stratego AST
	          
//	            apply-debug-trans :
//  	(sourceBasedir, inputfilePath, outputfilename) -> (status, outputfilename)

	     )
	      //; get-anno-ast(|<concat-strings> [project-path, "/", path]) => an_ast
	      /*
	      ; result   := <debug(!"selected: ")> selected
	      	; <debug(!"ast: ")> ast
	      	  ; <debug(!"position: ")> position
	      	    ; <debug(!"path: ")> path
	      	      ; <debug(!"project-path: ")> project-path
	      	        */


  		
  // the foo rules can be used to debug the transformation process. Use example.sma
strategies
	
	//get-project-dir = !"/home/rlindeman/workspace/strj-dbg-transformer"	
	get-project-dir = !"/home/rlindeman/Documents/TU/webdsl/spoofax-imp/source/org.strategoxt.imp.debug.stratego.transformer"


  	  
  	
rules  	  
	// inputfilePath is relative to sourceBasedir.
	// sourceBasedir should be treated as a project directory
	// the generated file will be saved at outputfilename
  apply-debug-trans = apply-debug-trans-internal <+ apply-debug-trans-error
	
	// inputfilePath is relative to sourceBasedir.
	// sourceBasedir should be treated as a project directory
	// the generated file will be saved at outputfilename
  apply-debug-trans-internal :
  	(sourceBasedir, inputfilePath, outputfilename) -> (status, outputfilename)
  	where(
  	absPath := 	<concat-strings> [sourceBasedir, "/", inputfilePath]
  	; get-anno-ast(|absPath)
  	//; debug(!"get-anno-ast")
  	; assert-module
  	//; debug(!"assert-module")
  	; filter-location
  	//; debug(!"filter-location")
  	; add-debug-info(|inputfilePath)
  	//; debug(!"add-debug-info(|inputfilePath)")
  	; pp-stratego-ast
  	//; debug(!"pp-stratego-ast")
  	; write-stratego(|outputfilename)
  	//; debug(!"write-stratego")
  	; status := "SUCCES"  		
  	)
  	//; <debug(!"exit-apply")> ""
  
  apply-debug-trans-debug :
  	input -> output
  	where debug(!"transform (debug=true)")
  	with output := input
  	
  apply-debug-trans-error :
  	false-arguments -> (status, outputfilename)
  	where(
  		not(?(i_sourceBasedir, i_inputfilePath, i_outputfilename))
  		; echo(!"Wrong arguments: ")
  		; outputfilename := ""
  		; status := "FAIL"
  	)
  	
  	apply-debug-project = apply-debug-project(|["."])
  	
  	// base-path = "/home/rlindeman/Documents/TU/webdsl/spoofax-imp/source/org.strategoxt.imp.debug.stratego.transformer/test/src/testimports"
  	// output-base-path = "/tmp/testimports"
  	// stratego-file = "localvar.str"
  	// library-paths = [".", "<dir>"]
	apply-debug-project(|library-paths) :
		(base-path, output-base-path, stratego-file) -> results
		where
			!(base-path, stratego-file)
  			; files := <get-internal-files(|library-paths)>
  			; missing := <filter(is-relpath)> files // files that still have a relative path are not found on the "-I" paths
  			; real-files := <filter(is-abspath)> files // only add debug information to the files that can be found on the "-I" paths
  			; results := <map(handle-file(|base-path, output-base-path))> // do apply-debug-trans for each file, store the result in the output-base-path
  			// results = [(status, filename), (status, filename)]
