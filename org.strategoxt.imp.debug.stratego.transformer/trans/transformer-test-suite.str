module transformer-test-suite

imports
  str-reader
  libstratego-lib
  gen-debug-info
  assert
  gen-lookup
  traverse-imports // show all files used as import
  trans-str

imports
  libstratego-lib
  libstratego-sglr
  libstratego-xtc
  libstrc

imports
	tests/imports-test
	tests/parsing-test
	tests/strategoxt-parsing-test


strategies // test the apply-debug-trans internal steps
	


  	  
  // filter unnecessary Location-annotations	
  foo2 = 
  	echo(|"Start foo2")
  	; get-project-dir => project-dir
  	; !"test/src" => input-base-dir
  	; !"test/generated" => output-base-dir
  	; !"example.tes" => sma-file
  	; <concat-strings> [project-dir, "/", input-base-dir, "/", sma-file] => absolute-location
  	; echo(|"reading ast from: ")
  	; echo(|absolute-location)
  	; parse-stratego-with-locations(|absolute-location)
  	; assert-module
  	; filter-location
  	// ; debug
  	; echo(|"End foo2")
  
  // add strategy entry and strategy exit calls 
  foo3 = 
  	echo(|"Start foo3")
  	; get-project-dir => project-dir
  	; !"test/src" => input-base-dir
  	; !"test/generated" => output-base-dir
  	; !"example.tes" => sma-file
  	; <concat-strings> [project-dir, "/", input-base-dir, "/", sma-file] => absolute-location
  	; echo(|"reading ast from: ")
  	; echo(|absolute-location)
  	; parse-stratego-with-locations(|absolute-location)
  	; assert-module
  	; filter-location
  	; add-debug-info(|absolute-location)
  	// ; debug
  	; echo(|"End foo3")
  	  
  // add strategy entry and strategy exit calls 
  bar3 = 
  	echo(|"Start bar3")
  	; get-project-dir => project-dir
  	; !"test/src" => input-base-dir
  	; !"test/generated" => output-base-dir
  	; !"localvar.tes" => sma-file
  	; <concat-strings> [project-dir, "/", input-base-dir, "/", sma-file] => absolute-location
  	; echo(|"reading ast from: ")
  	; echo(|absolute-location)
  	; parse-stratego-with-locations(|absolute-location)
  	; assert-module
  	; filter-location
  	; add-debug-info(|absolute-location)
  	// ; debug
  	; echo(|"End bar3")
  	  
  // pretty print stratego program with debug info
  foo4 = 
  	echo(|"Start foo4")
  	; get-project-dir => project-dir
  	; !"test/src" => input-base-dir
  	; !"test/generated" => output-base-dir
  	; !"example.tes" => sma-file
  	; <concat-strings> [project-dir, "/", input-base-dir, "/", sma-file] => absolute-location
  	; echo(|"reading ast from: ")
  	; echo(|absolute-location)
  	; parse-stratego-with-locations(|absolute-location)
  	; assert-module
  	; filter-location
  	; add-debug-info(|absolute-location)
  	; pp-stratego-ast
  	// ; debug
  	; echo(|"End foo4")
  	  
  	    // pretty print stratego program with debug info
  bar4 = 
  	echo(|"Start bar4")
  	; get-project-dir => project-dir
  	; !"test/src" => input-base-dir
  	; !"test/generated" => output-base-dir
  	; !"localvar.tes" => sma-file
  	; <concat-strings> [project-dir, "/", input-base-dir, "/", sma-file] => absolute-location
  	; echo(|"reading ast from: ")
  	; echo(|absolute-location)
  	; parse-stratego-with-locations(|absolute-location)
  	; assert-module
  	; filter-location
  	; add-debug-info(|absolute-location)
  	; pp-stratego-ast
  	// ; debug
  	; echo(|"End bar4")
  	  
  // read str file with annotations, add debug statements, write the file	  
  foo5 = 
  	echo(|"Start foo5")
  	; get-project-dir => project-dir
  	; !"test/src" => input-base-dir
  	; !"test/generated" => output-base-dir
  	; !"example.tes" => sma-file
  	; <concat-strings> [project-dir, "/", input-base-dir, "/", sma-file] => absolute-location
  	; <concat-strings> [project-dir, "/", output-base-dir, "/", <guarantee-extension(|"str")> sma-file] => absolute-output-location
  	; echo(|"reading ast from: ")
  	; echo(|absolute-location)
  	; parse-stratego-with-locations(|absolute-location)
  	; assert-module
  	; filter-location
  	; add-debug-info(|absolute-location)
  	; write-stratego-str(|absolute-output-location)
  	// ; debug
  	; echo(|"End foo5")
  	  
strategies // test apply-debug-trans errors
	
	  test-apply-debug-1 = !("asdf", "ddfg"); apply-debug-trans
  test-apply-debug-2 = !("asdf", "ddfg", "asfd"); apply-debug-trans
  test-apply-debug-3 = !"asdf"; apply-debug-trans
  
  	  	  	
strategies // test split-path
	  	
  create-s = !"/home/rlindeman/Documents/TU/webdsl/spoofax-imp/source/org.strategoxt.imp.debug.stratego.transformer/test/src/testimports/localvar.str"
  create-sub = !"/home/rlindeman/Documents/TU/webdsl/spoofax-imp/source/org.strategoxt.imp.debug.stratego.transformer/test/src/testimports"
  //create-s = !"/home/rlindeman"
  //create-sub = !"/home/r"
  
  
  test-extract-base-from-path-1 =
  	echo(|"test-extract-base-from-path-1")
  	//; !"long-string"; is-substring(!"long"); debug(!"is-substring: ")
  	//; <string-starts-with(|"foo")> "foobar"; debug(!"starts-with: ")
    ; create-s; string-starts-with(|<create-sub>) ; debug(!"starts-with: ")
  	; create-sub
  	; sub-string-length := <string-length>
  	; create-s
  	; full-string-length := <string-length>
  	; create-s; string-list := <explode-string>
  	; <split-at(|sub-string-length)> string-list => (base, path)// slice from sub-string-length to list end
  	; <debug(!"base, path: ")> (<implode-string> base, <implode-string> path)
  	//; create-s; try(is-substring(create-sub); debug(!"is-substring: "))
  	; echo(|"end test-extract-base-from-path-1")
  	  
  test-extract-base-from-path-2 = 	  
  	echo(|"test-extract-base-from-path-2")
  	; create-s; split-path(|<create-sub>)
  	; debug(!"parent, child: ")
  	; echo(|"end test-extract-base-from-path-2")
  	  

		

	
