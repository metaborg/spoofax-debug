module transformer-test-suite

imports
  str-reader
  libstratego-lib
  gen-debug-info
  assert
  gen-lookup
  traverse-imports // show all files used as import
  trans-str

strategies // test the apply-debug-trans internal steps
	

  // show ast with complete location annotation
  foo1 = 
  	echo(|"Start foo1")
  	; get-project-dir => project-dir
  	; !"test/src" => input-base-dir
  	; !"test/generated" => output-base-dir
  	; !"example.tes" => sma-file
  	; <concat-strings> [project-dir, "/", input-base-dir, "/", sma-file] => absolute-location
  	; echo(|"reading ast from: ")
  	; echo(|absolute-location)
  	; get-anno-ast(|absolute-location)
  	; assert-module
  	// ; debug
  	; echo(|"End foo1")
	
	  // show ast with complete location annotation
  bar1 = 
  	echo(|"Start bar1")
  	; get-project-dir => project-dir
  	; !"test/src" => input-base-dir
  	; !"test/generated" => output-base-dir
  	; !"localvar.tes" => sma-file
  	; <concat-strings> [project-dir, "/", input-base-dir, "/", sma-file] => absolute-location
  	; echo(|"reading ast from: ")
  	; echo(|absolute-location)
  	; get-anno-ast(|absolute-location)
  	; assert-module
  	// ; debug
  	; echo(|"End bar1")
  	  
  // filter unnecessary Location-annotations	
  foo2 = 
  	echo(|"Start foo2")
  	; get-project-dir => project-dir
  	; !"test/src" => input-base-dir
  	; !"test/generated" => output-base-dir
  	; !"example.tes" => sma-file
  	; <concat-strings> [project-dir, "/", input-base-dir, "/", sma-file] => absolute-location
  	; echo(|"reading ast from: ")
  	; echo(|absolute-location)
  	; get-anno-ast(|absolute-location)
  	; assert-module
  	; filter-location
  	// ; debug
  	; echo(|"End foo2")
  
  // add strategy entry and strategy exit calls 
  foo3 = 
  	echo(|"Start foo3")
  	; get-project-dir => project-dir
  	; !"test/src" => input-base-dir
  	; !"test/generated" => output-base-dir
  	; !"example.tes" => sma-file
  	; <concat-strings> [project-dir, "/", input-base-dir, "/", sma-file] => absolute-location
  	; echo(|"reading ast from: ")
  	; echo(|absolute-location)
  	; get-anno-ast(|absolute-location)
  	; assert-module
  	; filter-location
  	; add-debug-info(|absolute-location)
  	// ; debug
  	; echo(|"End foo3")
  	  
  // add strategy entry and strategy exit calls 
  bar3 = 
  	echo(|"Start bar3")
  	; get-project-dir => project-dir
  	; !"test/src" => input-base-dir
  	; !"test/generated" => output-base-dir
  	; !"localvar.tes" => sma-file
  	; <concat-strings> [project-dir, "/", input-base-dir, "/", sma-file] => absolute-location
  	; echo(|"reading ast from: ")
  	; echo(|absolute-location)
  	; get-anno-ast(|absolute-location)
  	; assert-module
  	; filter-location
  	; add-debug-info(|absolute-location)
  	// ; debug
  	; echo(|"End bar3")
  	  
  // pretty print stratego program with debug info
  foo4 = 
  	echo(|"Start foo4")
  	; get-project-dir => project-dir
  	; !"test/src" => input-base-dir
  	; !"test/generated" => output-base-dir
  	; !"example.tes" => sma-file
  	; <concat-strings> [project-dir, "/", input-base-dir, "/", sma-file] => absolute-location
  	; echo(|"reading ast from: ")
  	; echo(|absolute-location)
  	; get-anno-ast(|absolute-location)
  	; assert-module
  	; filter-location
  	; add-debug-info(|absolute-location)
  	; pp-stratego-ast
  	// ; debug
  	; echo(|"End foo4")
  	  
  	    // pretty print stratego program with debug info
  bar4 = 
  	echo(|"Start bar4")
  	; get-project-dir => project-dir
  	; !"test/src" => input-base-dir
  	; !"test/generated" => output-base-dir
  	; !"localvar.tes" => sma-file
  	; <concat-strings> [project-dir, "/", input-base-dir, "/", sma-file] => absolute-location
  	; echo(|"reading ast from: ")
  	; echo(|absolute-location)
  	; get-anno-ast(|absolute-location)
  	; assert-module
  	; filter-location
  	; add-debug-info(|absolute-location)
  	; pp-stratego-ast
  	// ; debug
  	; echo(|"End bar4")
  	  
  // read str file with annotations, add debug statements, write the file	  
  foo5 = 
  	echo(|"Start foo5")
  	; get-project-dir => project-dir
  	; !"test/src" => input-base-dir
  	; !"test/generated" => output-base-dir
  	; !"example.tes" => sma-file
  	; <concat-strings> [project-dir, "/", input-base-dir, "/", sma-file] => absolute-location
  	; <concat-strings> [project-dir, "/", output-base-dir, "/", <guarantee-extension(|"str")> sma-file] => absolute-output-location
  	; echo(|"reading ast from: ")
  	; echo(|absolute-location)
  	; get-anno-ast(|absolute-location)
  	; assert-module
  	; filter-location
  	; add-debug-info(|absolute-location)
  	; pp-stratego-ast
  	; write-stratego(|absolute-output-location)
  	// ; debug
  	; echo(|"End foo5")
  	  
strategies // test apply-debug-trans errors
	
	  test-apply-debug-1 = !("asdf", "ddfg"); apply-debug-trans
  test-apply-debug-2 = !("asdf", "ddfg", "asfd"); apply-debug-trans
  test-apply-debug-3 = !"asdf"; apply-debug-trans
  
strategies // test get-internal-files
	
	
  
  test-list-imports-1 = 
  	echo(|"test-list-imports-1")
  	; get-project-dir => project-dir
  	; !"test/src" => input-base-dir
  	; !"testimports/localvar.str" => main-str-file
  	; <concat-strings> [project-dir, "/", input-base-dir, "/", main-str-file] => absolute-location
  	; echo(|"reading ast from: ")
  	; echo(|absolute-location)
  	//; !["-i",  absolute-location, "-I", "."]
  	; args := ["-i", absolute-location]
  	; <list-imports(|args)> absolute-location
  	; ?(files, _)
  	; <debug(!"files: ")> files
  	  
  test-list-imports-2 = 
  	echo(|"test-list-imports-2")
  	; get-project-dir => project-dir
  	; !"test/src" => input-base-dir
  	; !"testogetarts/ogetarts.str" => main-str-file
  	; <concat-strings> [project-dir, "/", input-base-dir, "/", main-str-file] => absolute-location
  	; echo(|"reading ast from: ")
  	; echo(|absolute-location)
  	//; !["-i",  absolute-location, "-I", "."]
  	; args := ["-i", absolute-location]
  	; <list-imports(|args)> absolute-location
  	; ?(files, _)
  	; <debug(!"files: ")> files
  	  
  // project dir
  test-list-imports-3 = 
  	echo(|"test-list-imports-3")
  	; get-project-dir => project-dir
  	; !"trans" => input-base-dir
  	; !"stratego-transformer.str" => main-str-file
  	; <concat-strings> [project-dir, "/", input-base-dir, "/", main-str-file] => absolute-location
  	; echo(|"reading ast from: ")
  	; echo(|absolute-location)
  	//; !["-i",  absolute-location, "-I", "."]
  	; include-dir := <concat-strings> [project-dir, "/", "include"]
  	; lib-dir := <concat-strings> [project-dir, "/", "lib"] 
  	; syntax-dir := <concat-strings> [project-dir, "/", "syntax"]
  	; args := [/*"pack-stratego-io", */"--slack"/*, "--imports"*/
  	  , "-i", absolute-location
  	    //, "-I", include-dir // not needed!, will contain output
  	      //, "-I", lib-dir
  	        //, "-I", syntax-dir
  	          , "-I", project-dir
  	            //, "-I", "."
  	            ]
  	; debug(!"arguments: ")
  	; incl := [ //include-dir, // not needed, include dir only contains generated output
  	  lib-dir, syntax-dir, project-dir]
  	; <set-config> ("-I", incl)  
  	//; <set-config> ("-i", absolute-location)
  	; <list-imports(|args)> absolute-location
  	; ?(files, _)
  	; <debug(!"files: ")> ""
  	; <map(debug)> files

  // only ".", missing syntax and lib
  test-list-imports-4 = 
  	echo(|"test-list-imports-4")
  	; get-project-dir => project-dir
  	; !"trans" => input-base-dir
  	; !"stratego-transformer.str" => main-str-file
  	; <concat-strings> [project-dir, "/", input-base-dir, "/", main-str-file] => absolute-location
  	; echo(|"reading ast from: ")
  	; echo(|absolute-location)
  	//; !["-i",  absolute-location, "-I", "."]
  	; include-dir := <concat-strings> [project-dir, "/", "include"]
  	; lib-dir := <concat-strings> [project-dir, "/", "lib"] 
  	; syntax-dir := <concat-strings> [project-dir, "/", "syntax"]
  	; args := [/*"pack-stratego-io", */"--slack"/*, "--imports"*/
  	  , "-i", absolute-location
  	    //, "-I", include-dir // not needed!, will contain output
  	      //, "-I", lib-dir
  	        //, "-I", syntax-dir
  	          , "-I", "."
  	            ]
  	; debug(!"arguments: ")
  	; incl := [
  	  	//include-dir, lib-dir, syntax-dir, project-dir
  	  	"." ]
  	; <set-config> ("-I", incl)  
  	//; <set-config> ("-i", absolute-location)
  	; <list-imports(|args)> absolute-location
  	; ?(files, _)
  	; <debug(!"files: ")> ""
  	; <map(debug)> files
  	  
  // only ".", missing syntax and lib
  // current term: (basepath, stratego-file)
  test-list-imports-5 = 
  	echo(|"test-list-imports-5")
  	; get-project-dir => project-dir
  	; !"trans" => input-base-dir
  	; !"stratego-transformer.str" => main-str-file
  	; <concat-strings> [project-dir, "/", input-base-dir] => base-path
  	; !(base-path, main-str-file)
  	; files := <get-internal-files(|["."])>//; map(try-dbg); debug
  	//; debug(!"not-empty: ")
  	//; existing-files := <map(try-dbg)>
  	//; abs-files := <filter(is-abspath)>
  	; <debug(!"files: ")> ""
  	; <map(debug)> files
  	; missing := <filter(is-relpath)> files
  	; <debug(!"missing: ")> ""
  	; <map(debug)> missing
  	; echo(|"end test-list-imports-5")
  	  
  // current term: (basepath, stratego-file)
  // "-I" project-dir
  // all imports
  test-list-imports-6 = 
  	echo(|"test-list-imports-6")
  	; get-project-dir => project-dir
  	; !"trans" => input-base-dir
  	; !"stratego-transformer.str" => main-str-file
  	; <concat-strings> [project-dir, "/", input-base-dir] => base-path
  	//; lib-dir := <concat-strings> [project-dir, "/", "lib"] 
  	//; syntax-dir := <concat-strings> [project-dir, "/", "syntax"]
  	; !(base-path, main-str-file)
  	// also include "./include/Test.str" and "./lib/editor-common.generated.str"
  	; files := <get-internal-files(|[project-dir])> //; map(try-dbg); debug
  	; <debug(!"files: ")> ""
  	; <map(debug)> files
  	; missing := <filter(is-relpath)> files
  	; <debug(!"missing: ")> ""
  	; <map(debug)> missing
  	; echo(|"end test-list-imports-6")

  // "." contains all imports
  // current term: (basepath, stratego-file)
  test-list-imports-7 = 
  	echo(|"test-list-imports-7")
  	; get-project-dir => project-dir
  	; !"test/src/testimports" => input-base-dir
  	; !"test/generated/testimports" => output-base-dir
  	; !"localvar.str" => main-str-file
  	; <concat-strings> [project-dir, "/", input-base-dir] => base-path
  	; <concat-strings> [project-dir, "/", output-base-dir] => output-base-path
  	; !(base-path, main-str-file)
  	; files := <get-internal-files(|["."])> //; map(try-dbg); debug
  	; <debug(!"files: ")> ""
  	; <map(debug)> files
  	; missing := <filter(is-relpath)> files
  	; <debug(!"missing: ")> ""
  	; <map(debug)> missing
  	; real-files := <filter(is-abspath)> files
  	; map(handle-file(|base-path, output-base-path))
  	//; echo(|"end test-list-imports-7")

strategies // test split-path
	  	
  create-s = !"/home/rlindeman/Documents/TU/webdsl/spoofax-imp/source/org.strategoxt.imp.debug.stratego.transformer/test/src/testimports/localvar.str"
  create-sub = !"/home/rlindeman/Documents/TU/webdsl/spoofax-imp/source/org.strategoxt.imp.debug.stratego.transformer/test/src/testimports"
  //create-s = !"/home/rlindeman"
  //create-sub = !"/home/r"
  
  
  test-extract-base-from-path-1 =
  	echo(|"test-extract-base-from-path-1")
  	//; !"long-string"; is-substring(!"long"); debug(!"is-substring: ")
  	//; <string-starts-with(|"foo")> "foobar"; debug(!"starts-with: ")
    ; create-s; string-starts-with(|<create-sub>) ; debug(!"starts-with: ")
  	; create-sub
  	; sub-string-length := <string-length>
  	; create-s
  	; full-string-length := <string-length>
  	; create-s; string-list := <explode-string>
  	; <split-at(|sub-string-length)> string-list => (base, path)// slice from sub-string-length to list end
  	; <debug(!"base, path: ")> (<implode-string> base, <implode-string> path)
  	//; create-s; try(is-substring(create-sub); debug(!"is-substring: "))
  	; echo(|"end test-extract-base-from-path-1")
  	  
  test-extract-base-from-path-2 = 	  
  	echo(|"test-extract-base-from-path-2")
  	; create-s; split-path(|<create-sub>)
  	; debug(!"parent, child: ")
  	; echo(|"end test-extract-base-from-path-2")