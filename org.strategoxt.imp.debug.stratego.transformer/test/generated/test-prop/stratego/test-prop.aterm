Module(
  "test-prop"
, [ Imports([Import("stratego-debug-lib")])
  , Imports([Import("libstrategolib")])
  , Signature(
      [ Sorts([SortNoArgs("Prop")])
      , Constructors(
          [ OpDecl("False", ConstType(SortNoArgs("Prop")))
          , OpDecl("True", ConstType(SortNoArgs("Prop")))
          , OpDecl(
              "Atom"
            , FunType([ConstType(SortNoArgs("String"))], ConstType(SortNoArgs("Prop")))
            )
          , OpDecl(
              "Not"
            , FunType([ConstType(SortNoArgs("Prop"))], ConstType(SortNoArgs("Prop")))
            )
          , OpDecl(
              "And"
            , FunType(
                [ConstType(SortNoArgs("Prop")), ConstType(SortNoArgs("Prop"))]
              , ConstType(SortNoArgs("Prop"))
              )
            )
          , OpDecl(
              "Or"
            , FunType(
                [ConstType(SortNoArgs("Prop")), ConstType(SortNoArgs("Prop"))]
              , ConstType(SortNoArgs("Prop"))
              )
            )
          , OpDecl(
              "Impl"
            , FunType(
                [ConstType(SortNoArgs("Prop")), ConstType(SortNoArgs("Prop"))]
              , ConstType(SortNoArgs("Prop"))
              )
            )
          , OpDecl(
              "Eq"
            , FunType(
                [ConstType(SortNoArgs("Prop")), ConstType(SortNoArgs("Prop"))]
              , ConstType(SortNoArgs("Prop"))
              )
            )
          ]
        )
      ]
    )
  , Strategies(
      [ SDefNoArgs(
          "main"
        , Seq(
            CallT(SVar("s-enter"), [], [NoAnnoList(Str("\"main\""))])
          , Seq(
              Call(SVar("io-wrap"), [CallNoArgs(SVar("eval"))])
            , CallT(SVar("s-exit"), [], [NoAnnoList(Str("\"main\""))])
            )
          )
        )
      , SDefNoArgs(
          "eval"
        , Seq(
            CallT(SVar("s-enter"), [], [NoAnnoList(Str("\"eval\""))])
          , Seq(
              Call(SVar("innermost"), [CallNoArgs(SVar("E"))])
            , CallT(SVar("s-exit"), [], [NoAnnoList(Str("\"eval\""))])
            )
          )
        )
      ]
    )
  , Rules(
      [ RDefNoArgs(
          "E"
        , Rule(
            NoAnnoList(Op("Not", [NoAnnoList(Op("True", []))]))
          , App(
              CallT(SVar("r-exit"), [], [NoAnnoList(Str("\"E\""))])
            , NoAnnoList(Op("False", []))
            )
          , CallT(SVar("r-enter"), [], [NoAnnoList(Str("\"E\""))])
          )
        )
      , RDefNoArgs(
          "E"
        , Rule(
            NoAnnoList(Op("Not", [NoAnnoList(Op("True", []))]))
          , NoAnnoList(Op("False", []))
          , [ WhereClause(
                CallT(SVar("r-enter"), [], [NoAnnoList(Str("\"E\""))])
              )
            , WhereClause(Assign(Var("out"), NoAnnoList(Op("True", []))))
            ]
          )
        )
      ]
    )
  ]
)
